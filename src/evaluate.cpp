#include "evaluate.h"

#include "chess/all.h"
#include "utils/bits.h"
#include "types.h"

namespace sonic {

constexpr Value MiddleGamePieceSquareTable[PieceType::PIECE_NB][Square::SQ_NB] = {
    { // Pawn
        0, 0, 0, 0, 0, 0, 0, 0,
        166, 192, 204, 216, 216, 204, 192, 166,
        166, 192, 210, 242, 242, 210, 192, 166, 
        166, 192, 220, 268, 268, 220, 192, 166, 
        166, 192, 220, 242, 242, 220, 192, 166, 
        166, 192, 210, 216, 216, 210, 192, 166, 
        166, 192, 204, 216, 216, 204, 192, 166, 
        0, 0, 0, 0, 0, 0, 0, 0
    }, 
    { // Knight
        704, 730, 756, 768, 768, 756, 730, 704, 
        743, 768, 794, 807, 807, 794, 768, 743, 
        781, 807, 832, 844, 844, 832, 807, 781, 
        807, 832, 857, 870, 870, 857, 832, 807, 
        820, 844, 870, 883, 883, 870, 844, 820, 
        820, 844, 870, 883, 883, 870, 844, 820, 
        781, 807, 832, 844, 844, 832, 807, 781, 
        650, 768, 794, 807, 807, 794, 768, 650
    }, 
    { // Bishop
        786, 786, 792, 797, 797, 792, 786, 786, 
        812, 832, 827, 832, 832, 827, 832, 812, 
        817, 827, 842, 837, 837, 842, 827, 817, 
        822, 832, 837, 852, 852, 837, 832, 822, 
        822, 832, 837, 852, 852, 837, 832, 822, 
        817, 827, 842, 837, 837, 842, 827, 817, 
        812, 832, 827, 832, 832, 827, 832, 812, 
        812, 812, 817, 822, 822, 817, 812, 812
    }, 
    { // Rook
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267, 
        1267, 1275, 1282, 1289, 1289, 1282, 1275, 1267
    }, 
    { // Queen
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 
        2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560
    }, 
    { // King
        302, 328, 276, 225, 225, 276, 328, 302, 
        276, 302, 251, 200, 200, 251, 302, 276, 
        225, 251, 200, 149, 149, 200, 251, 225, 
        200, 225, 175, 124, 124, 175, 225, 200, 
        175, 200, 149, 98, 98, 149, 200, 175, 
        149, 175, 124, 72, 72, 124, 175, 149, 
        124, 149, 98, 47, 47, 98, 149, 124, 
        98, 124, 72, 21, 21, 72, 124, 98, 
    }
};

constexpr Value EndGamePieceSquareTable[PieceType::PIECE_NB][Square::SQ_NB] = {
    { // Pawn
        0, 0, 0, 0, 0, 0, 0, 0, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        256, 256, 256, 256, 256, 256, 256, 256, 
        0, 0, 0, 0, 0, 0, 0, 0
    },
    { // Knight
        730, 756, 781, 794, 794, 781, 756, 730, 
        756, 781, 807, 820, 820, 807, 781, 756, 
        781, 807, 832, 844, 844, 832, 807, 781, 
        794, 820, 844, 857, 857, 844, 820, 794, 
        794, 820, 844, 857, 857, 844, 820, 794, 
        781, 807, 832, 844, 844, 832, 807, 781, 
        756, 781, 807, 820, 820, 807, 781, 756, 
        730, 756, 781, 794, 794, 781, 756, 730
    },
    { // Bishop
        786, 802, 809, 817, 817, 809, 802, 786, 
        802, 817, 825, 832, 832, 825, 817, 802, 
        809, 825, 832, 839, 839, 832, 825, 809, 
        817, 832, 839, 847, 847, 839, 832, 817, 
        817, 832, 839, 847, 847, 839, 832, 817, 
        809, 825, 832, 839, 839, 832, 825, 809, 
        802, 817, 825, 832, 832, 825, 817, 802, 
        786, 802, 809, 817, 817, 809, 802, 786
    },
    { // Rook
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
        1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282
    },
    { // Queen
        2499, 2520, 2530, 2540, 2540, 2530, 2520, 2499, 
        2520, 2540, 2550, 2560, 2560, 2550, 2540, 2520, 
        2530, 2550, 2560, 2570, 2570, 2560, 2550, 2530, 
        2540, 2560, 2570, 2580, 2580, 2570, 2560, 2540, 
        2540, 2560, 2570, 2580, 2580, 2570, 2560, 2540, 
        2530, 2550, 2560, 2570, 2570, 2560, 2550, 2530, 
        2520, 2540, 2550, 2560, 2560, 2550, 2540, 2520, 
        2499, 2520, 2530, 2540, 2540, 2530, 2520, 2499
    },
    { // King
        16, 78, 108, 139, 139, 108, 78, 16, 
        78, 139, 170, 200, 200, 170, 139, 78, 
        108, 170, 200, 230, 230, 200, 170, 108, 
        139, 200, 230, 261, 261, 230, 200, 139, 
        139, 200, 230, 261, 261, 230, 200, 139, 
        108, 170, 200, 230, 230, 200, 170, 108, 
        78, 139, 170, 200, 200, 170, 139, 78, 
        16, 78, 108, 139, 139, 108, 78, 16
    }
};

constexpr Bitboard PassedPawnMask[Color::COLOR_NB][Square::SQ_NB] = {
    // White
    {
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
        847736400445440ULL, 1978051601039360ULL, 3956103202078720ULL, 7912206404157440ULL, 15824412808314880ULL, 31648825616629760ULL, 27127564814254080ULL, 54255129628508160ULL,
        847736400248832ULL, 1978051600580608ULL, 3956103201161216ULL, 7912206402322432ULL, 15824412804644864ULL, 31648825609289728ULL, 27127564807962624ULL, 54255129615925248ULL,
        847736349917184ULL, 1978051483140096ULL, 3956102966280192ULL, 7912205932560384ULL, 15824411865120768ULL, 31648823730241536ULL, 27127563197349888ULL, 54255126394699776ULL,
        847723465015296ULL, 1978021418369024ULL, 3956042836738048ULL, 7912085673476096ULL, 15824171346952192ULL, 31648342693904384ULL, 27127150880489472ULL, 54254301760978944ULL,
        844424930131968ULL, 1970324836974592ULL, 3940649673949184ULL, 7881299347898368ULL, 15762598695796736ULL, 31525197391593472ULL, 27021597764222976ULL, 54043195528445952ULL,
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
    },
    // Black
    {
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
        768ULL, 1792ULL, 3584ULL, 7168ULL, 14336ULL, 28672ULL, 24576ULL, 49152ULL,
        197376ULL, 460544ULL, 921088ULL, 1842176ULL, 3684352ULL, 7368704ULL, 6316032ULL, 12632064ULL,
        50529024ULL, 117901056ULL, 235802112ULL, 471604224ULL, 943208448ULL, 1886416896ULL, 1616928768ULL, 3233857536ULL,
        12935430912ULL, 30182672128ULL, 60365344256ULL, 120730688512ULL, 241461377024ULL, 482922754048ULL, 413933789184ULL, 827867578368ULL,
        3311470314240ULL, 7726764066560ULL, 15453528133120ULL, 30907056266240ULL, 61814112532480ULL, 123628225064960ULL, 105967050055680ULL, 211934100111360ULL,
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL,
    }
};

Value evaluate(const Position& pos) {
    static constexpr int PieceTypeValues[] = {1, 3, 3, 5, 9};
    Color us = pos.side_to_move();
    Value mid_game_score = 0;
    Value end_game_score = 0;
    int phase = 0;
    int coeff = 1;
    for(Color c : {Color::WHITE, Color::BLACK}) {
        for(Square sq : pos.pieces(c)) {
            PieceType pt = type(pos.piece_on(sq));
            mid_game_score += coeff * MiddleGamePieceSquareTable[pt][sq.to_int()];
            end_game_score += coeff * EndGamePieceSquareTable[pt][sq.to_int()];
            if(pt != PieceType::KING) {
                phase += PieceTypeValues[pt];
            }
        }
        // Passed pawn bonus.
        const Bitboard& opponent_pawns = pos.pieces(other_color(c), PieceType::PAWN);
        for(Square sq : pos.pieces(c, PieceType::PAWN)) {
            Bitboard visible_pawns = PassedPawnMask[c][sq.to_int()] & opponent_pawns;
            if(visible_pawns.empty()) {
                int promotion_rank = (c == Color::WHITE ? 8 : 1);
                int bonus = 200 - 25 * std::abs(static_cast<int>(sq.rank()) - promotion_rank);
                mid_game_score += coeff * bonus;
                end_game_score += coeff * bonus * 3 / 2;
            }
        }
        coeff *= -1;
    }
    Value score = mid_game_score * phase + end_game_score * (78 - phase);
    score /= 1950;
    return us == Color::WHITE ? score : -score;
}

} // namespace sonic